"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/hooks/useSupabase.ts":
/*!**********************************!*\
  !*** ./app/hooks/useSupabase.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useConfig: function() { return /* binding */ useConfig; },\n/* harmony export */   useFarmEntries: function() { return /* binding */ useFarmEntries; },\n/* harmony export */   useImbuements: function() { return /* binding */ useImbuements; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\n\nfunction useConfig() {\n    const [config, setConfig] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        tcValue: 38000,\n        tcPriceReais: 57,\n        tcAmount: 250\n    });\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchConfig();\n    }, []);\n    const fetchConfig = async ()=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"config_settings\").select(\"*\").single();\n            if (error && error.code !== \"PGRST116\") throw error;\n            if (data) {\n                setConfig({\n                    tcValue: data.tc_value,\n                    tcPriceReais: data.tc_price_reais,\n                    tcAmount: data.tc_amount\n                });\n            }\n        } catch (error) {\n            console.error(\"Error fetching config:\", error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const updateConfig = async (newConfig)=>{\n        try {\n            const { data: existing } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"config_settings\").select(\"id\").single();\n            if (existing) {\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"config_settings\").update({\n                    tc_value: newConfig.tcValue,\n                    tc_price_reais: newConfig.tcPriceReais,\n                    tc_amount: newConfig.tcAmount,\n                    updated_at: new Date().toISOString()\n                }).eq(\"id\", existing.id);\n                if (error) throw error;\n            } else {\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"config_settings\").insert({\n                    tc_value: newConfig.tcValue,\n                    tc_price_reais: newConfig.tcPriceReais,\n                    tc_amount: newConfig.tcAmount\n                });\n                if (error) throw error;\n            }\n            setConfig(newConfig);\n        } catch (error) {\n            console.error(\"Error updating config:\", error);\n        }\n    };\n    return {\n        config,\n        updateConfig,\n        loading\n    };\n}\nfunction useFarmEntries(config) {\n    const [entries, setEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchEntries();\n    }, []);\n    const fetchEntries = async ()=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"farm_entries\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            });\n            if (error) throw error;\n            if (data) {\n                const formattedEntries = data.map((entry)=>({\n                        id: entry.id,\n                        playerId: entry.player_id,\n                        playerName: entry.player_name,\n                        loot: entry.loot_gp,\n                        waste: entry.waste_gp,\n                        balance: entry.balance_gp,\n                        tcValue: entry.tc_value,\n                        tcQuantity: parseFloat(entry.tc_quantity.toString()),\n                        reaisValue: parseFloat(entry.reais_value.toString()),\n                        hours: entry.hours ? parseFloat(entry.hours.toString()) : undefined,\n                        reaisPerHour: entry.rate_per_hour ? parseFloat(entry.rate_per_hour.toString()) : undefined,\n                        imbuementCostPerHour: entry.imbuement_cost_per_hour ? parseFloat(entry.imbuement_cost_per_hour.toString()) : undefined,\n                        date: entry.created_at\n                    }));\n                setEntries(formattedEntries);\n            }\n        } catch (error) {\n            console.error(\"Error fetching entries:\", error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const addEntry = async (entry)=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"farm_entries\").insert({\n                player_id: entry.playerId,\n                player_name: entry.playerName,\n                loot_gp: entry.loot,\n                waste_gp: entry.waste,\n                balance_gp: entry.balance,\n                tc_value: entry.tcValue,\n                tc_quantity: entry.tcQuantity,\n                reais_value: entry.reaisValue,\n                hours: entry.hours || 0,\n                rate_per_hour: entry.reaisPerHour || 0,\n                imbuement_cost_per_hour: entry.imbuementCostPerHour || 0\n            }).select().single();\n            if (error) throw error;\n            if (data) {\n                const newEntry = {\n                    id: data.id,\n                    playerId: data.player_id,\n                    playerName: data.player_name,\n                    loot: data.loot_gp,\n                    waste: data.waste_gp,\n                    balance: data.balance_gp,\n                    tcValue: data.tc_value,\n                    tcQuantity: parseFloat(data.tc_quantity.toString()),\n                    reaisValue: parseFloat(data.reais_value.toString()),\n                    hours: data.hours ? parseFloat(data.hours.toString()) : undefined,\n                    reaisPerHour: data.rate_per_hour ? parseFloat(data.rate_per_hour.toString()) : undefined,\n                    imbuementCostPerHour: data.imbuement_cost_per_hour ? parseFloat(data.imbuement_cost_per_hour.toString()) : undefined,\n                    date: data.created_at\n                };\n                setEntries((prev)=>[\n                        newEntry,\n                        ...prev\n                    ]);\n            }\n        } catch (error) {\n            console.error(\"Error adding entry:\", error);\n        }\n    };\n    const updateEntry = async (updatedEntry)=>{\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"farm_entries\").update({\n                loot_gp: updatedEntry.loot || updatedEntry.balance || 0,\n                waste_gp: updatedEntry.waste || 0,\n                balance_gp: updatedEntry.balance || updatedEntry.loot || 0,\n                tc_quantity: updatedEntry.tcQuantity,\n                reais_value: updatedEntry.reaisValue,\n                hours: updatedEntry.hours || 0,\n                rate_per_hour: updatedEntry.reaisPerHour || 0\n            }).eq(\"id\", updatedEntry.id);\n            if (error) throw error;\n            setEntries((prev)=>prev.map((entry)=>entry.id === updatedEntry.id ? updatedEntry : entry));\n        } catch (error) {\n            console.error(\"Error updating entry:\", error);\n        }\n    };\n    const deleteEntry = async (id)=>{\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"farm_entries\").delete().eq(\"id\", id);\n            if (error) throw error;\n            setEntries((prev)=>prev.filter((entry)=>entry.id !== id));\n        } catch (error) {\n            console.error(\"Error deleting entry:\", error);\n        }\n    };\n    const updateAllTcValues = async (newTcValue)=>{\n        try {\n            // Buscar configurações atuais se não tiver config\n            let tcAmount = 250;\n            let tcPriceReais = 57;\n            if (config) {\n                tcAmount = config.tcAmount;\n                tcPriceReais = config.tcPriceReais;\n            } else {\n                const { data: configData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"config_settings\").select(\"*\").single();\n                if (configData) {\n                    tcAmount = configData.tc_amount;\n                    tcPriceReais = configData.tc_price_reais;\n                }\n            }\n            // Buscar todos os registros\n            const { data: allEntries, error: fetchError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"farm_entries\").select(\"*\");\n            if (fetchError) throw fetchError;\n            // Atualizar cada registro com o novo valor de TC\n            for (const entry of allEntries){\n                const tcQuantity = entry.loot_gp / newTcValue;\n                const reaisValue = tcQuantity / tcAmount * tcPriceReais;\n                const reaisPerHour = entry.hours > 0 ? reaisValue / entry.hours : 0;\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"farm_entries\").update({\n                    tc_value: newTcValue,\n                    tc_quantity: tcQuantity,\n                    reais_value: reaisValue,\n                    rate_per_hour: reaisPerHour\n                }).eq(\"id\", entry.id);\n            }\n            // Recarregar os dados\n            await fetchEntries();\n        } catch (error) {\n            console.error(\"Error updating all TC values:\", error);\n        }\n    };\n    return {\n        entries,\n        addEntry,\n        updateEntry,\n        deleteEntry,\n        updateAllTcValues,\n        loading\n    };\n}\nfunction useImbuements(playerId) {\n    const [imbuements, setImbuements] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (playerId) {\n            fetchImbuements();\n        }\n    }, [\n        playerId\n    ]);\n    const fetchImbuements = async ()=>{\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"imbuements\").select(\"*\").eq(\"player_id\", playerId).single();\n            if (error && error.code !== \"PGRST116\") throw error;\n            if (data) {\n                setImbuements({\n                    id: data.id,\n                    playerId: data.player_id,\n                    goldTokenPrice: data.gold_token_price,\n                    // Life Leech\n                    lifeLeechEnabled: data.life_leech_enabled,\n                    lifeLeechGoldTokens: data.life_leech_gold_tokens,\n                    lifeLeechCost: data.life_leech_cost,\n                    vampireTeethPrice: data.vampire_teeth_price,\n                    bloodyPincersPrice: data.bloody_pincers_price,\n                    pieceOfDeadBrainPrice: data.piece_of_dead_brain_price,\n                    // Mana Leech\n                    manaLeechEnabled: data.mana_leech_enabled,\n                    manaLeechGoldTokens: data.mana_leech_gold_tokens,\n                    manaLeechSilenceClaws: data.mana_leech_silence_claws,\n                    manaLeechGrimeleech: data.mana_leech_grimeleech,\n                    manaLeechCost: data.mana_leech_cost,\n                    ropeBeltPrice: data.rope_belt_price,\n                    silencerClawsPrice: data.silencer_claws_price,\n                    grimeleechWingsPrice: data.grimeleech_wings_price,\n                    // Critical\n                    criticalEnabled: data.critical_enabled,\n                    criticalGoldTokens: data.critical_gold_tokens,\n                    criticalVexclawTalons: data.critical_vexclaw_talons,\n                    criticalCost: data.critical_cost,\n                    protectiveCharmPrice: data.protective_charm_price,\n                    sabretoothPrice: data.sabretooth_price,\n                    vexclawTalonPrice: data.vexclaw_talon_price,\n                    // Skill Sword\n                    skillSwordEnabled: data.skill_sword_enabled,\n                    skillSwordLionsMane: data.skill_sword_lions_mane,\n                    skillSwordMoohtahShell: data.skill_sword_moohtah_shell,\n                    skillSwordWarCrystal: data.skill_sword_war_crystal,\n                    skillSwordCost: data.skill_sword_cost,\n                    lionsManePrice: data.lions_mane_price,\n                    moohtahShellPrice: data.moohtah_shell_price,\n                    warCrystalPrice: data.war_crystal_price,\n                    // Fire Protection\n                    fireProtectionGreenDragonLeather: data.fire_protection_green_dragon_leather,\n                    fireProtectionBlazingBone: data.fire_protection_blazing_bone,\n                    fireProtectionDrakenSulphur: data.fire_protection_draken_sulphur,\n                    fireProtectionCost: data.fire_protection_cost,\n                    greenDragonLeatherPrice: data.green_dragon_leather_price,\n                    blazingBonePrice: data.blazing_bone_price,\n                    drakenSulphurPrice: data.draken_sulphur_price,\n                    // Death Protection\n                    deathProtectionFlaskEmbalming: data.death_protection_flask_embalming,\n                    deathProtectionGloomWolfFur: data.death_protection_gloom_wolf_fur,\n                    deathProtectionMysticalHourglass: data.death_protection_mystical_hourglass,\n                    deathProtectionCost: data.death_protection_cost,\n                    flaskEmbalmingPrice: data.flask_embalming_price,\n                    gloomWolfFurPrice: data.gloom_wolf_fur_price,\n                    mysticalHourglassPrice: data.mystical_hourglass_price,\n                    // Protection Type\n                    protectionType: data.protection_type,\n                    // Totals\n                    totalImbuementCost: data.total_imbuement_cost,\n                    costPerHour: data.cost_per_hour,\n                    farmEntryId: data.farm_entry_id\n                });\n            }\n        } catch (error) {\n            console.error(\"Error fetching imbuements:\", error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const saveImbuements = async (config)=>{\n        try {\n            const dbData = {\n                player_id: config.playerId,\n                gold_token_price: config.goldTokenPrice,\n                // Life Leech\n                life_leech_enabled: config.lifeLeechEnabled,\n                life_leech_gold_tokens: config.lifeLeechGoldTokens,\n                life_leech_cost: config.lifeLeechCost || 0,\n                vampire_teeth_price: config.vampireTeethPrice || 1898,\n                bloody_pincers_price: config.bloodyPincersPrice || 9988,\n                piece_of_dead_brain_price: config.pieceOfDeadBrainPrice || 18999,\n                // Mana Leech\n                mana_leech_enabled: config.manaLeechEnabled,\n                mana_leech_gold_tokens: config.manaLeechGoldTokens,\n                mana_leech_silence_claws: config.manaLeechSilenceClaws,\n                mana_leech_grimeleech: config.manaLeechGrimeleech,\n                mana_leech_cost: config.manaLeechCost || 0,\n                rope_belt_price: config.ropeBeltPrice || 4800,\n                silencer_claws_price: config.silencerClawsPrice || 2995,\n                grimeleech_wings_price: config.grimeleechWingsPrice || 1436,\n                // Critical\n                critical_enabled: config.criticalEnabled,\n                critical_gold_tokens: config.criticalGoldTokens,\n                critical_vexclaw_talons: config.criticalVexclawTalons,\n                critical_cost: config.criticalCost || 0,\n                protective_charm_price: config.protectiveCharmPrice || 780,\n                sabretooth_price: config.sabretoothPrice || 390,\n                vexclaw_talon_price: config.vexclawTalonPrice || 1274,\n                // Skill Sword\n                skill_sword_enabled: config.skillSwordEnabled,\n                skill_sword_lions_mane: config.skillSwordLionsMane,\n                skill_sword_moohtah_shell: config.skillSwordMoohtahShell,\n                skill_sword_war_crystal: config.skillSwordWarCrystal,\n                skill_sword_cost: config.skillSwordCost || 0,\n                lions_mane_price: config.lionsManePrice || 150,\n                moohtah_shell_price: config.moohtahShellPrice || 4300,\n                war_crystal_price: config.warCrystalPrice || 970,\n                // Fire Protection\n                fire_protection_green_dragon_leather: config.fireProtectionGreenDragonLeather,\n                fire_protection_blazing_bone: config.fireProtectionBlazingBone,\n                fire_protection_draken_sulphur: config.fireProtectionDrakenSulphur,\n                fire_protection_cost: config.fireProtectionCost || 0,\n                green_dragon_leather_price: config.greenDragonLeatherPrice || 16000,\n                blazing_bone_price: config.blazingBonePrice || 1554,\n                draken_sulphur_price: config.drakenSulphurPrice || 1998,\n                // Death Protection\n                death_protection_flask_embalming: config.deathProtectionFlaskEmbalming,\n                death_protection_gloom_wolf_fur: config.deathProtectionGloomWolfFur,\n                death_protection_mystical_hourglass: config.deathProtectionMysticalHourglass,\n                death_protection_cost: config.deathProtectionCost || 0,\n                flask_embalming_price: config.flaskEmbalmingPrice || 8874,\n                gloom_wolf_fur_price: config.gloomWolfFurPrice || 21587,\n                mystical_hourglass_price: config.mysticalHourglassPrice || 700,\n                // Protection Type\n                protection_type: config.protectionType,\n                // Totals\n                total_imbuement_cost: config.totalImbuementCost || 0,\n                cost_per_hour: config.costPerHour || 0,\n                farm_entry_id: config.farmEntryId,\n                updated_at: new Date().toISOString()\n            };\n            // Primeiro, tentar buscar um registro existente\n            const { data: existingData, error: fetchError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"imbuements\").select(\"*\").eq(\"player_id\", config.playerId).single();\n            let savedData;\n            if (existingData && !fetchError) {\n                // Atualizar registro existente\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"imbuements\").update(dbData).eq(\"player_id\", config.playerId).select().single();\n                if (error) throw error;\n                savedData = data;\n            } else {\n                // Criar novo registro\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"imbuements\").insert(dbData).select().single();\n                if (error) throw error;\n                savedData = data;\n            }\n            if (savedData) {\n                // Atualizar o estado com os dados salvos\n                setImbuements({\n                    id: savedData.id,\n                    playerId: savedData.player_id,\n                    goldTokenPrice: savedData.gold_token_price,\n                    // Life Leech\n                    lifeLeechEnabled: savedData.life_leech_enabled,\n                    lifeLeechGoldTokens: savedData.life_leech_gold_tokens,\n                    lifeLeechCost: savedData.life_leech_cost,\n                    vampireTeethPrice: savedData.vampire_teeth_price,\n                    bloodyPincersPrice: savedData.bloody_pincers_price,\n                    pieceOfDeadBrainPrice: savedData.piece_of_dead_brain_price,\n                    // Mana Leech\n                    manaLeechEnabled: savedData.mana_leech_enabled,\n                    manaLeechGoldTokens: savedData.mana_leech_gold_tokens,\n                    manaLeechSilenceClaws: savedData.mana_leech_silence_claws,\n                    manaLeechGrimeleech: savedData.mana_leech_grimeleech,\n                    manaLeechCost: savedData.mana_leech_cost,\n                    ropeBeltPrice: savedData.rope_belt_price,\n                    silencerClawsPrice: savedData.silencer_claws_price,\n                    grimeleechWingsPrice: savedData.grimeleech_wings_price,\n                    // Critical\n                    criticalEnabled: savedData.critical_enabled,\n                    criticalGoldTokens: savedData.critical_gold_tokens,\n                    criticalVexclawTalons: savedData.critical_vexclaw_talons,\n                    criticalCost: savedData.critical_cost,\n                    protectiveCharmPrice: savedData.protective_charm_price,\n                    sabretoothPrice: savedData.sabretooth_price,\n                    vexclawTalonPrice: savedData.vexclaw_talon_price,\n                    // Skill Sword\n                    skillSwordEnabled: savedData.skill_sword_enabled,\n                    skillSwordLionsMane: savedData.skill_sword_lions_mane,\n                    skillSwordMoohtahShell: savedData.skill_sword_moohtah_shell,\n                    skillSwordWarCrystal: savedData.skill_sword_war_crystal,\n                    skillSwordCost: savedData.skill_sword_cost,\n                    lionsManePrice: savedData.lions_mane_price,\n                    moohtahShellPrice: savedData.moohtah_shell_price,\n                    warCrystalPrice: savedData.war_crystal_price,\n                    // Fire Protection\n                    fireProtectionGreenDragonLeather: savedData.fire_protection_green_dragon_leather,\n                    fireProtectionBlazingBone: savedData.fire_protection_blazing_bone,\n                    fireProtectionDrakenSulphur: savedData.fire_protection_draken_sulphur,\n                    fireProtectionCost: savedData.fire_protection_cost,\n                    greenDragonLeatherPrice: savedData.green_dragon_leather_price,\n                    blazingBonePrice: savedData.blazing_bone_price,\n                    drakenSulphurPrice: savedData.draken_sulphur_price,\n                    // Death Protection\n                    deathProtectionFlaskEmbalming: savedData.death_protection_flask_embalming,\n                    deathProtectionGloomWolfFur: savedData.death_protection_gloom_wolf_fur,\n                    deathProtectionMysticalHourglass: savedData.death_protection_mystical_hourglass,\n                    deathProtectionCost: savedData.death_protection_cost,\n                    flaskEmbalmingPrice: savedData.flask_embalming_price,\n                    gloomWolfFurPrice: savedData.gloom_wolf_fur_price,\n                    mysticalHourglassPrice: savedData.mystical_hourglass_price,\n                    // Protection Type\n                    protectionType: savedData.protection_type,\n                    // Totals\n                    totalImbuementCost: savedData.total_imbuement_cost,\n                    costPerHour: savedData.cost_per_hour,\n                    farmEntryId: savedData.farm_entry_id\n                });\n                console.log(\"Imbuements saved successfully:\", savedData);\n            }\n        } catch (error) {\n            console.error(\"Error saving imbuements:\", error);\n            throw error; // Re-throw para que o componente saiba que houve erro\n        }\n    };\n    return {\n        imbuements,\n        saveImbuements,\n        loading\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/hooks/useSupabase.ts\n"));

/***/ })

});